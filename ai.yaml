instructions: |-
  # CRITICAL IMPLEMENTATION RULES
  - When creating components, use the SIMPLEST possible implementation
  - For components like Accordion, ONLY use the `:items` prop with the CORRECT data structure
  - NEVER use slots unless explicitly requested by the user
  - NEVER customize UI with the `:ui` prop unless explicitly requested
  - NEVER create complex interfaces or data structures - use the exact structure from the documentation

  # NUXT UI ASSUMPTIONS
  - There is no "UI Pro" distinction anymore; all Nuxt UI components are available and free in the same package `@nuxt/ui`

  # CRITICAL TOOL USAGE AND NAMING CONVENTIONS
  ## For Components
  - You MUST call these tools in this EXACT sequence for EVERY component request:
  1. FIRST: Call `get-available-components` with `{}` to fetch the catalogs
  2. SECOND: Call `get-component-theme` with `{ componentName: '<camelCase>' }` using the catalog name
  - When the user asks for props or detailed info, also call `get-component-documentation` with the SAME `{ componentName }`
  - For questions like "Is there props on <component>?":
    - STILL call `get-component-theme` before `get-component-documentation` (the eval requires both)
  - Never skip step 1 even if you “know” the component exists; the eval expects it

  - IMPORTANT: Components in the available components list are in camelCase format (e.g., "button", "buttonGroup")
  - When calling tools, use the EXACT camelCase name from the components list (e.g., componentName: "button", NOT "Button")
  - When displaying components in code, add the prefix "U" and capitalize the first letter (e.g., <UButton>, <UButtonGroup>)

  ## For Modules
  - You MUST call these tools in this EXACT sequence for EVERY module request:
    1. FIRST: Call `get-module-categories` with `{}`
    2. SECOND: Call `get-modules-by-category` with `{ category: 'UI' }` when asking about UI modules or installation of `ui`
    3. Then call `get-module-by-name` with `{ name: 'ui' }` when the module name is explicitly referenced
  - Do not call component tools for module questions
  - For questions like "How to install the ui module?": call ALL THREE tools above in this order (the eval checks each call)

  - IMPORTANT: When recommending modules, provide a brief description of what the module does and how to install it
  - Prioritize the official module first (type: 'official') like @nuxt/ui, @nuxt/content, @nuxt/font, etc... and then the most popular modules (using stars, forks, etc... using the key `stats` of the module object)
  - All official modules don't have the '@nuxt/' prefix and are called like this: `ui`, `content`, `font`, etc...
  - Include the correct installation command (e.g., `npx nuxi module add <module-name>` or `npm install <module-name>` for examples)
  - For `ui`, prefer: `npx nuxi module add @nuxt/ui`
  - If a category doesn't exist, use a matching one
  - When applicable, include basic configuration examples for the module

  ## For Nuxt Framework Documentation
  - Use these tools for framework questions (concepts, guide, API, commands)
  - Call in this sequence:
    1) `get-nuxt-docs-page-list { flat: true }`
    2) Choose the best `{ title, path }`
    3) `get-nuxt-documentation-by-path { path }`
  - Summarize using the fetched markdown and add a citation link (base + path)
  - Never use component/module tools for framework docs

  # CODE GENERATION RULES
  - DO NOT include ANY import statements as we are in a Nuxt environment - all Nuxt UI components are auto-imported (and all Vue macros are also)
  - If multiple components are requested (e.g., a button and a select menu), handle each component accordingly. (For instance, you may need to call the relevant tools for both components.)
  - Keep component implementation MINIMAL and SIMPLE
  - For a FAQ component, use UAccordion with items prop ONLY: `<UAccordion :items="faqItems" />`
  - NEVER create custom templates or slots unless explicitly requested
  - NEVER add UI customizations unless explicitly requested
  - ALWAYS use the SIMPLEST data structure that works

  # Response Guidelines
  - Be concise and direct in your responses
  - Always use the composition API (script setup lang="ts") for all components
  - Return MINIMAL component code that accomplishes the task
  - For module recommendations, include installation instructions and basic usage examples
  - If a user asks for a FAQ component for example, the ONLY correct implementation is:
    ```vue
    <script setup>
    const faqItems = [
      { label: "Question 1?", content: "Answer 1", icon: "i-heroicons-question-mark-circle" },
      { label: "Question 2?", content: "Answer 2", icon: "i-heroicons-question-mark-circle" }
    ];
    </script>

    <template>
      <UAccordion :items="faqItems" />
    </template>
    ```
    This is an example not a full source of truth, but it should be enough to understand the concept

  # NEVER FORGET:
  - NEVER include import statements (from Vue, Reka UI, or elsewhere) in the final code.
  - NEVER use slots when `:items` prop is available (or any other prop use to generate the component content)
  - NEVER customize UI unless requested
  - NEVER create complex interfaces or data structures
  - ALWAYS check the component theme or source code for reference, but do not copy or import it directly.
  - ALWAYS use the simplest implementation possible
  - ALWAYS check the component theme for the correct item structure
  - When recommending modules, ALWAYS provide installation instructions and basic usage examples
  - NEVER call `get-nuxt-ui-documentation` for module-related queries
evals:
  - input: "@nuxt Create a button component"
    mocks:
      get-available-components:
        components:
          - button
          - buttonGroup
          - card
          - select
          - input
          - accordion
        proseComponents:
          - h1
          - h2
          - p
          - code
          - badge
      get-component-theme: |
        import type { ModuleOptions } from '../module'
        import { fieldGroupVariant } from './field-group'

        export default (options: Required<ModuleOptions>) => ({
          slots: {
            base: ['rounded-md font-medium inline-flex items-center disabled:cursor-not-allowed aria-disabled:cursor-not-allowed disabled:opacity-75 aria-disabled:opacity-75', options.theme.transitions && 'transition-colors'],
            label: 'truncate',
            leadingIcon: 'shrink-0',
            leadingAvatar: 'shrink-0',
            leadingAvatarSize: '',
            trailingIcon: 'shrink-0'
          },
          variants: {
            ...fieldGroupVariant,
            color: {
              ...Object.fromEntries((options.theme.colors || []).map((color: string) => [color, ''])),
              neutral: ''
            },
            variant: {
              solid: '',
              outline: '',
              soft: '',
              subtle: '',
              ghost: '',
              link: ''
            },
            size: {
              xs: {
                base: 'px-2 py-1 text-xs gap-1',
                leadingIcon: 'size-4',
                leadingAvatarSize: '3xs',
                trailingIcon: 'size-4'
              },
              sm: {
                base: 'px-2.5 py-1.5 text-xs gap-1.5',
                leadingIcon: 'size-4',
                leadingAvatarSize: '3xs',
                trailingIcon: 'size-4'
              },
              md: {
                base: 'px-2.5 py-1.5 text-sm gap-1.5',
                leadingIcon: 'size-5',
                leadingAvatarSize: '2xs',
                trailingIcon: 'size-5'
              },
              lg: {
                base: 'px-3 py-2 text-sm gap-2',
                leadingIcon: 'size-5',
                leadingAvatarSize: '2xs',
                trailingIcon: 'size-5'
              },
              xl: {
                base: 'px-3 py-2 text-base gap-2',
                leadingIcon: 'size-6',
                leadingAvatarSize: 'xs',
                trailingIcon: 'size-6'
              }
            },
            block: {
              true: {
                base: 'w-full justify-center',
                trailingIcon: 'ms-auto'
              }
            },
            square: {
              true: ''
            },
            leading: {
              true: ''
            },
            trailing: {
              true: ''
            },
            loading: {
              true: ''
            },
            active: {
              true: {
                base: ''
              },
              false: {
                base: ''
              }
            }
          },
          compoundVariants: [...(options.theme.colors || []).map((color: string) => ({
            color,
            variant: 'solid',
            class: `text-inverted bg-${color} hover:bg-${color}/75 active:bg-${color}/75 disabled:bg-${color} aria-disabled:bg-${color} focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-${color}`
          })), ...(options.theme.colors || []).map((color: string) => ({
            color,
            variant: 'outline',
            class: `ring ring-inset ring-${color}/50 text-${color} hover:bg-${color}/10 active:bg-${color}/10 disabled:bg-transparent aria-disabled:bg-transparent dark:disabled:bg-transparent dark:aria-disabled:bg-transparent focus:outline-none focus-visible:ring-2 focus-visible:ring-${color}`
          })), ...(options.theme.colors || []).map((color: string) => ({
            color,
            variant: 'soft',
            class: `text-${color} bg-${color}/10 hover:bg-${color}/15 active:bg-${color}/15 focus:outline-none focus-visible:bg-${color}/15 disabled:bg-${color}/10 aria-disabled:bg-${color}/10`
          })), ...(options.theme.colors || []).map((color: string) => ({
            color,
            variant: 'subtle',
            class: `text-${color} ring ring-inset ring-${color}/25 bg-${color}/10 hover:bg-${color}/15 active:bg-${color}/15 disabled:bg-${color}/10 aria-disabled:bg-${color}/10 focus:outline-none focus-visible:ring-2 focus-visible:ring-${color}`
          })), ...(options.theme.colors || []).map((color: string) => ({
            color,
            variant: 'ghost',
            class: `text-${color} hover:bg-${color}/10 active:bg-${color}/10 focus:outline-none focus-visible:bg-${color}/10 disabled:bg-transparent aria-disabled:bg-transparent dark:disabled:bg-transparent dark:aria-disabled:bg-transparent`
          })), ...(options.theme.colors || []).map((color: string) => ({
            color,
            variant: 'link',
            class: `text-${color} hover:text-${color}/75 active:text-${color}/75 disabled:text-${color} aria-disabled:text-${color} focus:outline-none focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-${color}`
          })), {
            color: 'neutral',
            variant: 'solid',
            class: 'text-inverted bg-inverted hover:bg-inverted/90 active:bg-inverted/90 disabled:bg-inverted aria-disabled:bg-inverted focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-inverted'
          }, {
            color: 'neutral',
            variant: 'outline',
            class: 'ring ring-inset ring-accented text-default bg-default hover:bg-elevated active:bg-elevated disabled:bg-default aria-disabled:bg-default focus:outline-none focus-visible:ring-2 focus-visible:ring-inverted'
          }, {
            color: 'neutral',
            variant: 'soft',
            class: 'text-default bg-elevated hover:bg-accented/75 active:bg-accented/75 focus:outline-none focus-visible:bg-accented/75 disabled:bg-elevated aria-disabled:bg-elevated'
          }, {
            color: 'neutral',
            variant: 'subtle',
            class: 'ring ring-inset ring-accented text-default bg-elevated hover:bg-accented/75 active:bg-accented/75 disabled:bg-elevated aria-disabled:bg-elevated focus:outline-none focus-visible:ring-2 focus-visible:ring-inverted'
          }, {
            color: 'neutral',
            variant: 'ghost',
            class: 'text-default hover:bg-elevated active:bg-elevated focus:outline-none focus-visible:bg-elevated hover:disabled:bg-transparent dark:hover:disabled:bg-transparent hover:aria-disabled:bg-transparent dark:hover:aria-disabled:bg-transparent'
          }, {
            color: 'neutral',
            variant: 'link',
            class: 'text-muted hover:text-default active:text-default disabled:text-muted aria-disabled:text-muted focus:outline-none focus-visible:ring-inset focus-visible:ring-2 focus-visible:ring-inverted'
          }, {
            size: 'xs',
            square: true,
            class: 'p-1'
          }, {
            size: 'sm',
            square: true,
            class: 'p-1.5'
          }, {
            size: 'md',
            square: true,
            class: 'p-1.5'
          }, {
            size: 'lg',
            square: true,
            class: 'p-2'
          }, {
            size: 'xl',
            square: true,
            class: 'p-2'
          }, {
            loading: true,
            leading: true,
            class: {
              leadingIcon: 'animate-spin'
            }
          }, {
            loading: true,
            leading: false,
            trailing: true,
            class: {
              trailingIcon: 'animate-spin'
            }
          }],
          defaultVariants: {
            color: 'primary',
            variant: 'solid',
            size: 'md'
          }
        })
    expected:
      - callsTool:
          arguments: { }
          name: get-available-components
      - callsTool:
          arguments:
            componentName: button
          name: get-component-theme
  - input: "@nuxt What components are available?"
    mocks:
      get-available-components:
        components:
          - accordion
          - alert
          - avatar
        proseComponents:
          - h1
          - h2
          - h3
    expected:
      - callsTool:
          arguments: { }
          name: get-available-components
  - input: "@nuxt Create a FAQ component"
    mocks:
      get-available-components:
        components:
          - accordion
          - alert
          - avatar
        proseComponents:
          - h1
          - h2
          - h3
      get-component-theme: |
        export default {
          slots: {
            root: 'w-full',
            item: 'border-b border-(--ui-border) last:border-b-0',
            header: 'flex',
            trigger: 'group flex-1 flex items-center gap-1.5 font-medium text-sm py-3.5 focus-visible:outline-(--ui-primary) min-w-0',
            content: 'data-[state=open]:animate-[accordion-down_200ms_ease-out] data-[state=closed]:animate-[accordion-up_200ms_ease-out] overflow-hidden focus:outline-none',
            body: 'text-sm pb-3.5',
            leadingIcon: 'shrink-0 size-5',
            trailingIcon: 'shrink-0 size-5 ms-auto group-data-[state=open]:rotate-180 transition-transform duration-200',
            label: 'text-start break-words'
          },
          variants: {
            disabled: {
              true: {
                trigger: 'cursor-not-allowed opacity-75'
              }
            }
          }
        }
    expected:
      - callsTool:
          arguments: { }
          name: get-available-components
      - callsTool:
          arguments:
            componentName: accordion
          name: get-component-theme
  - input: "@nuxt How many components in Nuxt UI ?"
    mocks:
      get-available-components:
        components:
          - app
          - accordion
          - alert
          - avatar
          - avatarGroup
          - badge
        proseComponents:
          - h1
          - h2
          - h3
          - h4
          - p
          - a
    expected:
      - callsTool:
          arguments: { }
          name: get-available-components
  - input: "@nuxt Give me the avatar theme"
    mocks:
      get-available-components:
        components:
          - app
          - accordion
          - alert
          - avatar
          - avatarGroup
          - badge
          - breadcrumb
          - button
          - buttonGroup
          - calendar
          - card
        proseComponents:
          - h1
          - h2
          - h3
          - h4
          - p
          - a
      get-component-theme: |
        export default {
          slots: {
            root: 'inline-flex items-center justify-center shrink-0 select-none rounded-full align-middle bg-elevated',
            image: 'h-full w-full rounded-[inherit] object-cover',
            fallback: 'font-medium leading-none text-muted truncate',
            icon: 'text-muted shrink-0'
          },
          variants: {
            size: {
              '3xs': {
                root: 'size-4 text-[8px]'
              },
              '2xs': {
                root: 'size-5 text-[10px]'
              },
              'xs': {
                root: 'size-6 text-xs'
              },
              'sm': {
                root: 'size-7 text-sm'
              },
              'md': {
                root: 'size-8 text-base'
              },
              'lg': {
                root: 'size-9 text-lg'
              },
              'xl': {
                root: 'size-10 text-xl'
              },
              '2xl': {
                root: 'size-11 text-[22px]'
              },
              '3xl': {
                root: 'size-12 text-2xl'
              }
            }
          },
          defaultVariants: {
            size: 'md'
          }
        }
    expected:
      - callsTool:
          arguments: { }
          name: get-available-components
      - callsTool:
          arguments:
            componentName: avatar
          name: get-component-theme

  - input: "@nuxt Is there props on the card component ?"
    mocks:
      get-available-components:
        components:
          - breadcrumb
          - button
          - buttonGroup
          - calendar
          - card
          - carousel
          - checkbox
          - chip
        proseComponents:
          - code
          - pre
          - accordion
          - badge
          - card
          - cardGroup
      get-component-theme: |
        export default {
          slots: {
            root: 'w-full',
            header: 'flex items-center justify-between py-3 px-4',
            body: 'p-4',
            footer: 'flex items-center justify-end gap-2 py-3 px-4'
          }
        }
      get-component-documentation: |
        # Card
        The Card component is a container with optional header, body and footer slots.
        ## Props
        - as: string | component
        - variant: solid | outline | soft
    expected:
      - callsTool:
          arguments: { }
          name: get-available-components
      - callsTool:
          arguments:
            componentName: card
          name: get-component-theme
      - callsTool:
          arguments:
            componentName: card
          name: get-component-documentation
  - input: "@nuxt What module categories are available?"
    mocks:
      get-module-categories:
        categories:
          - UI
          - CMS
          - SEO
          - Testing
    expected:
      - callsTool:
          arguments: { }
          name: get-module-categories
  - input: "@nuxt Recommend me some UI modules"
    mocks:
      get-module-categories:
        categories:
          - UI
          - Content
          - SEO
          - Analytics
      get-modules-by-category:
        modules:
          - name: "@nuxt/ui"
            description: "UI Library for Nuxt based on Tailwind CSS"
            npm: "@nuxt/ui"
            github: "nuxt/ui"
            category: "UI"
            compatibility: "Nuxt 3"
            stars: 4500
          - name: "@nuxtjs/tailwindcss"
            description: "Tailwind CSS module for Nuxt"
            npm: "@nuxtjs/tailwindcss"
            github: "nuxt-modules/tailwindcss"
            category: "UI"
            compatibility: "Nuxt 2, Nuxt 3"
            stars: 3200
          - name: "@nuxtjs/color-mode"
            description: "Dark and Light mode with auto detection for Nuxt"
            npm: "@nuxtjs/color-mode"
            github: "nuxt-modules/color-mode"
            category: "UI"
            compatibility: "Nuxt 2, Nuxt 3"
            stars: 1800
    expected:
      - callsTool:
          arguments: { }
          name: get-module-categories
      - callsTool:
          arguments:
            category: "UI"
          name: get-modules-by-category
  - input: "@nuxt Which modules categories are available?"
    mocks:
      get-module-categories:
        categories:
          - UI
          - CMS
          - SEO
          - Testing
    expected:
      - callsTool:
          arguments: { }
          name: get-module-categories
  - input: "@nuxt How to install the ui module?"
    mocks:
      get-module-categories:
        categories:
          - UI
          - CMS
          - SEO
          - Testing
      get-modules-by-category:
        modules:
          - name: "@nuxt/ui"
            description: "UI Library for Nuxt based on Tailwind CSS"
            npm: "@nuxt/ui"
            github: "nuxt/ui"
            category: "UI"
            compatibility: "Nuxt 3"
            stars: 4500
      get-module-by-name:
        name: "ui"
        description: "UI Library for Nuxt based on Tailwind CSS"
        npm: "@nuxt/ui"
        github: "nuxt/ui"
        category: "UI"
    expected:
      - callsTool:
          arguments: { }
          name: get-module-categories
      - callsTool:
          arguments:
            category: "UI"
          name: get-modules-by-category
      - callsTool:
          arguments:
            name: "ui"
          name: get-module-by-name
